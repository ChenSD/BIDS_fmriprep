#!/bin/bash

# This bash script aims to organize data to BIDS strucure

# set IO
niidir=/data/fMRI/rawnii # output dir
dcmdir=/data/fMRI/rawdcm # inpiut dir

mkdir ${Nifti}

# Loop over all subjects

for i in ${dcmdir}/yuan*; do

    cd $i # Go to current directory
    ### Get subject name and id
    Subject=${PWD##*/}
    echo "-------------------------------"
    echo "Processing" $Subject
    echo "-------------------------------"
	
    subid=${Subject:14:2}
    echo "-------------------------------"
    echo "Processing" $subid
    echo "-------------------------------"     
    
    ### set input and output directories
    sub_dicm_dir=${dcmdir}/${Subject} # input directories of dicom data
    sub_nii_dir=${niidir}/sub-${subid}
	
	if [ ! -d ${sub_nii_dir} ]; then
       mkdir ${sub_nii_dir}
	else
       echo "The subject" ${subid} "has exist. Skip this subject"
	   continue
    fi
	
	mkdir -p ${sub_nii_dir}/anat
	mkdir -p ${sub_nii_dir}/func  
    anat_dir=${sub_nii_dir}/anat # output directories of nifti-T1 data
	func_dir=${sub_nii_dir}/func # output directories of nifti-func data
	
    ### Convert dcm to sub_nii_dir and change to sub_nii_dir
    echo "-------------------------------"
	echo "dcm2nii dcm to" ${sub_dicm_dir}
	echo "-------------------------------"
	dcm2niix  -z n -f %p_%t_%s  -o ${sub_nii_dir} ${sub_dicm_dir}
	# dcm2niix -z n -f %p_%t_%s -o /path/ouput /path/to/dicom/folder will save data as nii without compression, 
	# with the filename based on the protocol name (%p) acquisition time (%t) and DICOM series number (%s), 
	# with all files saved to the folder "output". 
	
	cd ${sub_nii_dir}
	
	### Rename nii and json files generated by dcm2niix according to BIDS
	## BIDS: sub-subid_task-taskid_sessionid.nii 
	## subid=01~ taskid=rest/run sessionid= T1w/bold
	## T1
    anatfiles=$(ls -1 *mprage* | wc -l) # get the number of T1-related files
    for ((i=1;i<=${anatfiles};i++)); do
        Anat=$(ls *mprage*) 
        tempanat=$(ls -1 $Anat | sed '1q;d') #Capture new file to change
        tempanatext="${tempanat##*.}"
        tempanatfile="${tempanat%.*}"
        mv ${tempanatfile}.${tempanatext} sub-${subid}_T1w.${tempanatext}
        echo "${tempanat} changed to sub-${subid}_T1w.${tempanatext}"
    done
	
	## functional tfMRI files 
    funcfiles=$(ls -1 *run* | wc -l) # get the number of func-related files
	for ((i=1;i<=${funcfiles};i++)); do
        func=$(ls *run*) 
        tempfunc=$(ls -1 $func | sed '1q;d') #Capture new file to change
        tempfuncext="${tempfunc##*.}"
        tempfuncfile="${tempfunc%.*}"
		func_id=${tempfuncfile:0:4} # run1 run2 etc.
        mv ${tempfuncfile}.${tempfuncext} sub-${subid}_task-${func_id}_bold.${tempfuncext}
        echo "${tempfunc} changed to sub-${subid}_${func_id}.${tempfuncext}"
    done
	
	## functional rfMRI files 
    rfuncfiles=$(ls -1 *rest* | wc -l) # get the number of func-related files
	for ((i=1;i<=${rfuncfiles};i++)); do
        rfunc=$(ls *rest*) 
        temprfunc=$(ls -1 $rfunc | sed '1q;d') #Capture new file to change
        temprfuncext="${temprfunc##*.}"
        temprfuncfile="${temprfunc%.*}"
        mv ${temprfuncfile}.${temprfuncext} sub-${subid}_task-rest_bold.${temprfuncext}
        echo "${temprfunc} changed to sub-${subid}_rest.${temprfuncext}"
    done
		
	###Organize files into output folders
    for files in $(ls sub*); do 
       Orgfile="${files%.*}" # file name
       Orgext="${files##*.}" # file extenstion
       Modality=$(echo $Orgfile | rev | cut -d '_' -f 1 | rev) # get T1w or run*?
       if [ "$Modality" == "T1w" ]; then
       	mv ${Orgfile}.${Orgext} ${anat_dir}
       else 
	    mv ${Orgfile}.${Orgext} ${func_dir} # run or rest
       fi 
    done
	
done
